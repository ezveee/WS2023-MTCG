<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Description_Default_401" xml:space="preserve">
    <value>Access token is missing or invalid</value>
  </data>
  <data name="Description_Default_404_User" xml:space="preserve">
    <value>User not found.</value>
  </data>
  <data name="Description_DeleteTrading_200" xml:space="preserve">
    <value>Trading deal successfully deleted</value>
  </data>
  <data name="Description_DeleteTrading_403" xml:space="preserve">
    <value>The deal contains a card that is not owned by the user.</value>
  </data>
  <data name="Description_DeleteTrading_404" xml:space="preserve">
    <value>The provided deal ID was not found.</value>
  </data>
  <data name="Description_GetDeck_200" xml:space="preserve">
    <value>The deck has cards, the response contains these</value>
  </data>
  <data name="Description_GetDeck_204" xml:space="preserve">
    <value>The request was fine, but the deck doesn't have any cards</value>
  </data>
  <data name="Description_GetScoreboard_200" xml:space="preserve">
    <value>The scoreboard could be retrieved successfully.</value>
  </data>
  <data name="Description_GetStack_200" xml:space="preserve">
    <value>The user has cards, the response contains these</value>
  </data>
  <data name="Description_GetStack_204" xml:space="preserve">
    <value>The request was fine, but the user doesn't have any cards</value>
  </data>
  <data name="Description_GetStats_200" xml:space="preserve">
    <value>The stats could be retrieved successfully.</value>
  </data>
  <data name="Description_GetTradings_200" xml:space="preserve">
    <value>There are trading deals available, the response contains these</value>
  </data>
  <data name="Description_GetTradings_204" xml:space="preserve">
    <value>The request was fine, but there are no trading deals available</value>
  </data>
  <data name="Description_GetUser_200" xml:space="preserve">
    <value>Data successfully retrieved</value>
  </data>
  <data name="Description_PostBattle_200" xml:space="preserve">
    <value>The battle has been carried out successfully.</value>
  </data>
  <data name="Description_PostPackage_201" xml:space="preserve">
    <value>Package and cards successfully created</value>
  </data>
  <data name="Description_PostPackage_403" xml:space="preserve">
    <value>Provided user is not "admin"</value>
  </data>
  <data name="Description_PostPackage_409" xml:space="preserve">
    <value>At least one card in the packages already exists</value>
  </data>
  <data name="Description_PostSession_200" xml:space="preserve">
    <value>User login successful</value>
  </data>
  <data name="Description_PostSession_401" xml:space="preserve">
    <value>Invalid username/password provided</value>
  </data>
  <data name="Description_PostTrading_201" xml:space="preserve">
    <value>Trading deal successfully created</value>
  </data>
  <data name="Description_PostTrading_403" xml:space="preserve">
    <value>The deal contains a card that is not owned by the user or locked in the deck.</value>
  </data>
  <data name="Description_PostTrading_409" xml:space="preserve">
    <value>A deal with this deal ID already exists.</value>
  </data>
  <data name="Description_PostTrading_409_Custom" xml:space="preserve">
    <value>Card already engaged in another trade</value>
  </data>
  <data name="Description_PostTrading_CarryOutTrade_200" xml:space="preserve">
    <value>Trading deal successfully executed.</value>
  </data>
  <data name="Description_PostTrading_CarryOutTrade_403" xml:space="preserve">
    <value>The offered card is not owned by the user, or the requirements are not met (Type, MinimumDamage), or the offered card is locked in the deck.</value>
  </data>
  <data name="Description_PostTrading_CarryOutTrade_404" xml:space="preserve">
    <value>The provided deal ID was not found.</value>
  </data>
  <data name="Description_PostTransaction_200" xml:space="preserve">
    <value>A package has been successfully bought</value>
  </data>
  <data name="Description_PostTransaction_403" xml:space="preserve">
    <value>Not enough money for buying a card package</value>
  </data>
  <data name="Description_PostTransaction_404" xml:space="preserve">
    <value>No card package available for buying</value>
  </data>
  <data name="Description_PostUser_201" xml:space="preserve">
    <value>User successfully created</value>
  </data>
  <data name="Description_PostUser_409" xml:space="preserve">
    <value>User with same username already registered</value>
  </data>
  <data name="Description_PutDeck_200" xml:space="preserve">
    <value>The deck has been successfully configured</value>
  </data>
  <data name="Description_PutDeck_400" xml:space="preserve">
    <value>The provided deck did not include the required amount of cards</value>
  </data>
  <data name="Description_PutDeck_403" xml:space="preserve">
    <value>At least one of the provided cards does not belong to the user or is not available.</value>
  </data>
  <data name="Description_PutUser_200" xml:space="preserve">
    <value>User sucessfully updated.</value>
  </data>
  <data name="HttpResponse_200_OK" xml:space="preserve">
    <value>HTTP/1.1 200 OK
X-Description: {0}

</value>
  </data>
  <data name="HttpResponse_200_OK_WithContent" xml:space="preserve">
    <value>HTTP/1.1 200 OK
Content-Type: application/json
X-Description: {0}

{1}</value>
  </data>
  <data name="HttpResponse_201_Created" xml:space="preserve">
    <value>HTTP/1.1 201 Created
X-Description: {0}

</value>
  </data>
  <data name="HttpResponse_204_NoContent" xml:space="preserve">
    <value>HTTP/1.1 204 No Content
X-Description: {0}

</value>
  </data>
  <data name="HttpResponse_400_BadRequest" xml:space="preserve">
    <value>HTTP/1.1 400 Bad Request
X-Description: {0}

</value>
  </data>
  <data name="HttpResponse_401_Unauthorized" xml:space="preserve">
    <value>HTTP/1.1 401 Unauthorized
X-Description: {0}

</value>
  </data>
  <data name="HttpResponse_403_Forbidden" xml:space="preserve">
    <value>HTTP/1.1 403 Forbidden
X-Description: {0}

</value>
  </data>
  <data name="HttpResponse_404_NotFound" xml:space="preserve">
    <value>HTTP/1.1 404 Not Found
X-Description: {0}

</value>
  </data>
  <data name="HttpResponse_409_Conflict" xml:space="preserve">
    <value>HTTP/1.1 409 Conflict
X-Description: {0}

</value>
  </data>
  <data name="HttpResponse_500_InternalServerError" xml:space="preserve">
    <value>HTTP/1.1 500 Internal Server Error
X-Description: {0}

</value>
  </data>
</root>